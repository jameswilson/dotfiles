[user]
	name = First Last
	email = username@example.com
	editor = vim

[github]
	user = github user 
	token = github API token 

[alias]
	ci    = commit -a
	co    = checkout
	praise = blame
	lg    = log
	pom   = push origin master
	stat  = status
	st    = "!f() { git ls-files --exclude-standard -t -u -s -m -d $@ | sed -e 's/C.*\t/C /' ; } ; f"
	sto   = st -o
	ds    = diff --stat
	cds   = !git ds --cached
	fp    = format-patch
	s     = "!git diff --name-status | sed -e 's/^/W /' ; git diff --cached --name-status | sed -e 's/^/C /'"
	up    = !git remote update ; git gc
	tree  = log --graph --oneline --all --decorate
	odiff = difftool -t opendiff

	# Creating branch patches - By Dave Reid (http://bit.ly/oVysCd)
	branch-name = "!git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD)"
	cd-root = rev-parse --show-cdup
	branch-diff = !git format-patch --stdout "$1" > "$(git cd-root)$(git branch-name).patch"

[branch]
    # Always use rebase when pulling, to avoid evil merge commits. By Randy Fay (http://randyfay.com/node/103)
	autosetuprebase = always

[core]
	pager = less -FRSX
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore
	quotepath = false

[color]
	ui = true
	pager = true
	diff = auto
	status = auto
	branch = auto
	interactive = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[diff]
	tool = vimdiff

[merge]
	tool = vimdiff

[push]
	default = tracking
